#single linkedlist
class node:
    def __init__(self,z):
        self.data=z;
        self.next=None
class list:
    def __init__(self):
        self.head=None
    def creat(self,x):
        if(self.head==None):
            self.head=node(x)
        else:
            temp=self.head
            while(temp.next!=None):
                temp=temp.next
            temp.next=node(x)
    def add_front(self,x):
        if(self.head==None):
            self.head=node(x)
        else:
            temp=node(x)
            temp.next=self.head
            self.head=temp
    def add_end(self,x):
        if(self.head==None):
            self.head=node(x)
        else:
            curr=self.head
            while(curr.next):
                curr=curr.next
            temp=node(x)
            curr.next=temp
    def delete_beg(self):
        if self.head==None:
            return
        temp=self.head
        self.head=self.head.next
        temp.next=None
        return temp.data
    def delete_end(self):
        if self.head==None:
            return
        temp=self.head
        while(temp.next.next):
            temp=temp.next
        temp.next=None
        return temp.data
    def traversal(self):
        temp=self.head
        while(temp):
            print(temp.data,end="-->")
            temp=temp.next
a=list()
a.creat(10)
a.creat(20)
a.creat(30)
a.add_front(70)
a.add_end(25)
a.delete_end()
a.delete_beg()
a.traversal()

#creating linked list
class node:
    def __init__(self,val=0):
        self.val=val
        self.next=None
o1=node(1)
o2=node(2)
o3=node(3)
o1.next=o2
o2.next=o3
print(o1,o1.val,o1.next)

#no too many object creation is required
class node:
    def __init__(self,val=0):
        self.val=val
        self.next=None
o1=node(1)
o1.next=node(2)
o1.next.next=node(3)
print(o1.val,o1.next.val,o1.next.next.val)

#binary to integer using linkedlist
class node:
    def __init__(self,val=0):
        self.val=val
        self.next=None
class list:
    def __init__(self):
        self.head=None
    def getDecimalValue(self,head):
        s=""
        curr=head
        while(curr):
            s+=str(curr.val)
            curr=curr.next
        return int(s,2)
l=[1,0,1]
o=list()
for i in l:
    o.getDecimalValue(i)

#double linked list
class node:
    def __init__(self,z):
        self.data=z;
        self.next=None
        self.prev=None
class dll:
    def __init__(self):
        self.head=None
        self.tail=None
    def add_front(self,x):
        if(self.head==None):
            self.head=node(x)
            self.tail=self.head
        else:
            temp=node(x)
            temp.next=self.head
            self.head.prev=temp
            self.head=temp
    def add_end(self,x):
        if(self.head==None):
            self.head=node(x)
            self.tail=self.head
        else:
            temp=node(x)
            temp.prev=self.tail
            self.tail.next=temp
            self.tail=temp
    def delete_beg(self):
        if self.head==None:
            return
        self.head=self.head.next
        self.head.prev=None
    def delete_end(self):
        if self.head==None:
            return
        self.tail=self.tail.prev
        self.tail.next=None
    def reverse(self):
        curr=self.head
        while curr:
            curr.prev,curr.next=curr.next,curr.prev
            curr=curr.prev
        self.head,self.tail=self.tail,self.head
    def traversal(self):
        temp=self.head
        while(temp):
            print(temp.data,end="-->")
            temp=temp.next
a=dll()
a.add_front(10)
a.add_front(20)
a.add_front(30)
a.add_end(40)
a.reverse()
a.delete_beg()
a.delete_end()
a.traversal()

#reverse of sll
class node:
    def __init__(self,z):
        self.data=z;
        self.next=None
class list:
    def __init__(self):
        self.head=None
    def creat(self,x):
        if(self.head==None):
            self.head=node(x)
        else:
            temp=self.head
            while(temp.next!=None):
                temp=temp.next
            temp.next=node(x)
    def add_front(self,x):
        if(self.head==None):
            self.head=node(x)
        else:
            temp=node(x)
            temp.next=self.head
            self.head=temp
    def reverse(self):
        prev=None
        curr=self.head
        while curr!=None:
            next=curr.next
            curr.next=prev
            prev=curr
            curr=next
        self.head=prev    
    def traversal(self):
        temp=self.head
        while(temp):
            print(temp.data,end="-->")
            temp=temp.next
o=list()
o.creat(10)
o.creat(20)
o.creat(30)
o.add_front(40)
o.reverse()
o.traversal()