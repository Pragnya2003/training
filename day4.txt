#uppercase and lowercase
a=input("enter any alphabet:")
if(a.isupper()):
    print(ord(a)-64)
else:
    print(ord(a)-96)


#ip:x and 4
op:b
a=input("enter any alphabet:")
k=int(input())
if(ord(a)+k>122):
    print(chr((ord(a)+k)-26))
else:
    print(chr(ord(a)+k))

#*
**
***
a=int(input())
for i in range(a):
    for j in range(i+1):
        print("*",end=' ')
    print()
a=int(input())
for i in range(a):
    print("*" * (i+1))

#pyramid
a=int(input())
for i in range(a):
    for j in range(a-i):
        print(" ",end='')
    for k in range(i+1):
        print("*",end=' ')
    print()
    
a=int(input())
for i in range(a):
    print(" "*(a-i) + "* " *(i+1))
    
#paralellogram
a=int(input())
for i in range(a):
    print(" "*(a-i) +"* "*(a+1))
    
#reverse pyramid
a=int(input())
for i in range(a):
    print(" "*(i+1) + "* " *(a-i))

#diamond    
a=int(input())
for i in range(a):
    print(" "*(a-i) + "* " *(i+1))
for i in range(a):
    print(" "*(i+1) + "* " *(a-i))

#1
#22
#333
#4444
a=int(input())
for i in range(a):
    print(str(i+1)*(i+1))
    
a=int(input())
b=1
for i in range(1,a+1):
    print(b*i)
    b=(b*10)+1
    
a=int(input())
for i in range(1,a+1):
    print(((10**i)//9)*i)

#fact
def cse(x):
    if(x==0):
        return 1
    return x*cse(x-1)
print(cse(5))

#fib
n=int(input())
def cse(x):
    if(x==1):
        return 1
    if(x==2):
        return 1
    return cse(x-1)+cse(x-2)
for i in range(1,n):
    print(cse(i),end=" ")

#single linked list
class node:
    def __init__(self,z):
        self.data=z;
        self.next=None
class list:
    def __init__(self):
        self.head=None
    def creat(self,x):
        if(self.head==None):
            self.head=node(x)
        else:
            temp=self.head
            while(temp.next!=None):
                temp=temp.next
            temp.next=node(x)
    def add_front(self,x):
        if(self.head==None):
            self.head=node(x)
        else:
            temp=node(x)
            temp.next=self.head
            self.head=temp
    def traversal(self):
        temp=self.head
        while(temp!=None):
            print(temp.data,end="-->")
            temp=temp.next
a=list()
a.creat(10)
a.creat(20)
a.creat(30)
a.add_front(70)
a.traversal()